Kelsey Skaarva 
Final Exam Questions 6 and 12




1. Owner: Kelsey Skaarva
Collaborators: Shari, Jojo
Reviewer: Linn - The answers look good. Good job!
Hangout: http://youtu.be/Ucl46TncWdk
With respect to pair programming:        
1. What is it?        
-Sitting side-by-side facing non-personal computer screens(many for any pair to use) and write code together. No personal computer helps to avoid distractions such as emails. One person is the driver and one person is the observer and these roles should be switched often. The Driver enters code and thinks tactically about how to complete the current task and explains thoughts while typing. The Observer reviews each line of code as typed in, and acts as safety net for the driver. The Observer thinks strategically about future problems and makes suggestions to the driver. This should result in lots of talking and concentration.
1. What are its advantages?
-Pair programming seems to be quicker when task is low complexity. Pair programming also yields higher quality when complexity is high. Pair programming also sometimes leads to more readable code. Another benefit of pair programming is that a transfer of knowledge often happens from person to person in the pair. Some examples of knowledge that may be shared are programming idioms, tools and tricks, company process, and latest technologies. 
1. What are its disadvantages?
-Higher programming cost due to two people doing the work. About 15% more hours collectively spent for the pair of programmers to complete the task versus a solo programmer.
1. What is promiscuous pairing? 
-Promiscuous pairing is when teams purposefully swap partners per task until eventually everyone has worked with everyone on the team.        
1. Should you do it?
-Yes, pairing with different people increases the chances of shared knowledge. Consider pairing with someone of a different experience level and you’ll both learn. The more experienced person will gain a better understanding by explaining while the less experienced person will gain new knowledge         that the more experienced person had acquired over years of programming.
1. Discuss the following statement by Fred Brooks: "You cannot win if your team loses, and you cannot fail if your team wins".
-This quote directly applies to Agile and pair programming. Agile involves working in small teams and pair programming involves pairs of that small team working together. “You cannot win if your team loses” in this context means that you could be the best programmer in the world and code everything you are responsible for rapidly by yourself, but if your team never catches up the team will not be successful and therefore you will not be successful. “You cannot fail if your team wins” on the other hand means that maybe you fell behind with your work a bit or didn’t pull your weight, but if your team compensates for that and helps you catch up the team will succeed. Even though you might not feel you succeed personally you did succeed because the team as a whole succeeded and you are a part of the team.


                                  
1. Owner: Kelsey Skaarva
Collaborators: Kyle, Jojo
Reviewer: David - This is good! I approve
Hangout: http://youtu.be/Ucl46TncWdk
For each of the following workstyles: Rational Extrovert, Rational Introvert, Intuitive         Extrovert and Intuitive Introvert:        
   1. Describe the typical characteristics of each        
        Rational Extrovert: Tells others and decides logically
Rational Introvert: Asks others and decides logically
Intuitive Extrovert: Tells others and Acknowledges feelings 
Intuitive Introvert: Asks others and Acknowledges feelings
   1. Describe how they would typically interact/communicate with others
Rational Extrovert: Judges colleagues by results. Top priority for making decisions is efficiency. Good at making sound decisions quickly. Only looks at the bottom line.
Rational Introvert: Judges colleagues by whether or not they look busy. Has little tolerance for those who don’t appear to be working hard. Good thorough and accurate worker who prides his/her self on reputation.
Intuitive Extrovert: Judges colleagues by trusting his/her gut. Top priority for decision making is intuition. Assertive and creative. Likes lots of interaction and discussion of ideas with colleagues. Likes to be recognized for ideas.
Intuitive Introvert: Thrives on colleagues attention and has extreme desire to be liked. Sensitive and aware of emotional reactions. Good listener, project members turn to him/her for understanding. Takes time to make right decision based on all the information as well as relationship dependencies/emotional involvements. 
   1. Describe how you should interact/communicate with them in order to be effective
Rational Extrovert: Include questions to allow them  to tell you what he wants or needs. Include facts and figures NOT judgments or feelings. May prefer maintenance programming and other tasks that requires attention to detail and analysis of complex results. May prefer tasks in which they direct others via lots of communication and interaction.
Rational Introvert: Give lots of information and let them draw their own conclusions. Include facts and figures NOT judgments or feelings. May prefer maintenance programming and other tasks that requires attention to detail and analysis of complex results. May prefer tasks in which they gather information from others.
Intuitive Extrovert: Include questions to allow them to tell you what he wants or needs. Take advantage of his creativity, get ideas from him. May prefer design and developments that require new ideas. May prefer tasks in which they direct others via lots of communication and interaction.
Intuitive Introvert: Give lots of information and let them draw their own conclusions. Take advantage of his creativity, get ideas from him. May prefer design and developments that require new ideas. May prefer tasks in which they gather information from others.


39.   Owner: Kelsey Skaarva
        Collaborators: N/A
        Reviewer: N/A
        Hangout: http://youtu.be/Ucl46TncWdk
Lessons Learned (Everyone must answer!): Most organizations carry out a postmortem (i.e., after delivery and acceptance) analysis of a project. In it, they assess all aspects of the project including products, process and resources with the intent of identifying both what well in the project and what areas should be improved upon in future projects. Before a formal postmortem, each team member does a self-assessment, called a Lessons Learned document. Write your own sections of our Lessons Learned document for the class by summarizing:
a. What were the most important (to you, personally) concepts, principles, skills, tools, etc. that you learned/mastered throughout the semester.
- The skills I think are most valuable that I acquired throught the semester are pair programming skills, and just basic software engineering principles
b. Note any concepts, principles, skills, tools, etc. that you would have liked to learn, but that we didn't cover.
-I just wish the course wasn’t as fast paced as it was. I feel like I would have gotten more out of the assignments had I had more time to do and focus on them. 
c. List all everything that you feel you did especially well this semester (master specific tools, languages, skills, etc.; contribute to the project in a specific way, etc., learn and implement specific things quickly, etc.).
-I feel I did well with the ruby stuff(1st Assignment stuff)
d. List anything that you feel that you didn't do as well, or that didn't go as well as you hoped (getting a list of these items will help me to better schedule material for future semesters).
-I just would have liked to have had more time with all assignments after the first assignment it all felt very rushed.
e. THANK YOU!
-Thank you!