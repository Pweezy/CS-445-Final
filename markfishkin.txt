Question 20:
Answer the following:
a.	Define framework and explain its benefits.
b.	Is a framework the same or different from a toolkit?  Explain.
c.	How is an architecture or design pattern related to a framework?
d.	Discuss convention over configuration with respect to the Rails framework.


a. A framework is a set of cooperating classes that make up a reusable design. They create a foundation for the project and focus on design reuse rather than code reuse. It's beneficial as it provides a well-known structure that works. It also creates less work for the programmer as they only have to focus on creating the function calls specific to the application.

b. A framework and toolkit are fundamentally different. A toolkit provides the programmer with a set of functions calls and expects the programmer to create the design and body of the application. This is contrary to frameworks which provide the structure and not the function calls. Both have their benefits. A framework reduces overhead for the programmer, while a toolkit gives the programmer more freedom as they are not limited by conventions.

c. A framework dictates the architecture being used in an application. By using it, you agree to adhere to the principles of the related architecture. An architecture is how the program should be built, while the framework is the skeleton to build it upon.

d. Convention over configuration is used widely throughout the Rails framework. It seeks to decrease the amount of decisions a developer needs to make, allowing them to focus more on the development of the software. It greatly reduces the time a programmer thinks about where something has to go, as the convention will place it in the correct place. For example, when creating a model in Rails, convention creates a database table for that model without developer input. This is an example of naming conventions in Rails, something that occurs in many aspects of the framework. Also at the start of the development process, Convention over configuration automatically creates the proper file system for the user.


Owner: Mark Fishkin
Collaborators: Ridwan Olatilewa, Alex Valera
Hangout:https://www.youtube.com/watch?v=61DyMxytIc0&feature=youtu.be
Reviewer: Ryan Smith
Hangout: https://www.youtube.com/watch?v=ut7jFcoRyQA&feature=youtu.be
Pivotal Tracker:https://www.pivotaltracker.com/n/projects/1230002/stories/84548374

------------------------------------------------------------------------------------------

Question 36:
Answer the following:
a.	What is the type of association in Rails that handles indirect relationships?
b.	Given:
Class Moviegoer
  has_many:reviews
How could we establish an association that could give us the movies that a moviegoer has reviewed.
c.	What is the RESTful way to create routes for associations?
d.	Show the RESTful way to create a route for movies and its associated item reviews
e.	What should be a concern if a movie is then deleted?
f.	What is a named scope, and how is it used?
g.	Does using a named scope incur performance penalties?  Why or why not?


a. Through-associations handle indirect relationships in Rails.

b.
Class Moviegoer
  has_many :reviews 
  has_many :movies, through => :reviews

c. The RESTful way to create routes for associations is to use a nested route URI which captures the IDs of the resource and of the items associated with that resource.

d.resources :movies do
	resources :reviews
  end

e. When a movie is deleted, anything that is owned by association to that movie needs to be deleted as well. This is done through the statement dependent=>destroy, which is added to the owned field.

f. Named scope allows for reuse of model logic. It encapsulates specific model logic in a composable way. Lambda expressions work well with named scopes because they allow the passing of arguments into the named scope.

g. Using a named scope does not incur performance penalties. Named scopes are lazily evaluated, meaning that there is no database query till a match occurs. This also means that it can occur in any order.

Owner: Mark Fishkin
Collaborators: Ridwan Olatilewa, Alex Valera
Hangout:https://www.youtube.com/watch?v=61DyMxytIc0&feature=youtu.be
Reviewer: Ryan Smith
Hangout: https://www.youtube.com/watch?v=ut7jFcoRyQA&feature=youtu.be
Pivotal Tracker:https://www.pivotaltracker.com/n/projects/1230002/stories/84547722

----------------------------------------------------------------------------------------------

Question 39:

a. The most important skills I learned in the semester were how projects are managed and how to code in Ruby. I've had several interviews already which asked about different project management techniques and different process models. It was great to be able to answer these questions, and to see that there are real world applications to the information being learned. I also really enjoyed learning Ruby as it was a very different language compared to the ones I know already. I probably won't make it my go to language, but it is a nice thing to know for the future.

b. There's nothing specific that I wish we went over that we didn't get a chance too. However, I would have liked to have created a small personal website. I think a smaller project like this would have strengthened our skills in ruby and rails, while also providing us with an enjoyable task. I personally feel like we were not prepared enough for the open source projects, but a project of a smaller caliber would have prepared us nicely for it.

c. There are several things that I feel I did well on this semester. The first is that I worked very well in groups. The whole driver/navigator concept worked really well in my pair programming sessions, and I think that contributed to a lot of good work. I am also proud of how quickly I was able to pick up Ruby. Considering it is a different language to the ones I normally use, I picked up on a lot of its conventions relatively fast. Granted there is still a whole lot more to learn, but it is a good start. I also did well on the midterm for the class which was nice.

d. I think there are two main struggles that occurred in the class. The first is that it felt like the course was split into two halves. The first was the project management side, which focused on development techniques and teamwork skills. The second was the programming side which mostly focused on Ruby and Rails. I understand that in the real world both of these sides would go hand in hand. However for a class where we are learning most of this stuff for the first time, it was generally confusing to have so much different material at once. The second main struggle was that I felt like the Rails half of the course was rushed. I did not have a strong enough understanding of rails before being placed in the open source project. I understand that doing something is the best way to learn something, but it would have helped to work on a smaller project beforehand as stated above in part b.

e. Thank You!

Owner: Mark Fishkin
